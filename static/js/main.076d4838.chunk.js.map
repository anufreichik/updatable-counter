{"version":3,"sources":["ListItem.jsx","List.jsx","Controller.jsx","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","useState","editMode","setEditMode","updateVal","setUpdateVal","changeEditMode","Array","from","length","el","buttons","_","i","reverse","map","v","className","key","Math","random","onClick","handleOperation","id","counter","disabled","index","changeCounterPosition","listlength","type","onChange","e","target","value","val","handleUpdate","deleteCounter","List","list","ind","Controller","initVal","setInitVal","numberButtons","setNumberButtons","sortDirection","setSortDirection","placeholder","addCounter","sortCounters","App","uuidv4","setList","dir","newList","sort","a","b","indexOf","current","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.076d4838.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction ListItem(props) {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [updateVal, setUpdateVal] = useState(0);\r\n\r\n    const changeEditMode = () => {\r\n        setEditMode(!editMode);\r\n    }\r\n    const handleUpdateValueChange = (e) => {\r\n        setUpdateVal(+e.target.value)\r\n    }\r\n\r\n    const updateOnClick = (id, val) => {\r\n        props.handleUpdate(id, val);\r\n        setEditMode(!editMode);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {Array.from({length: props.el.buttons}, (_, i) => i + 1).reverse().map(v =>\r\n                    //MINUS BUTTONS\r\n\r\n                    <button className='btn btn-dark btn-sm btn-space' key={Math.random()}\r\n                            onClick={() => props.handleOperation(props.el.id, v)}>+{v}</button>\r\n                )}\r\n\r\n                {props.el.counter}\r\n\r\n                {Array.from({length: props.el.buttons}, (_, i) => i + 1).map(v =>\r\n                    //PLUS BUTTONS\r\n\r\n                    <button className='btn btn-dark btn-sm btn-space' key={Math.random()}\r\n                            onClick={() => props.handleOperation(props.el.id, -v)}>-{v}</button>\r\n                )}\r\n\r\n                {/*UP BUTTON*/}\r\n                <button className='btn btn-info btn-sm btn-space' disabled={props.index === 0}\r\n                        onClick={() => props.changeCounterPosition(props.el.id, -1)}>↑\r\n                </button>\r\n\r\n                {/*DOWN BUTTON*/}\r\n                <button className='btn btn-info btn-sm btn-space' disabled={props.index === props.listlength - 1}\r\n                        onClick={() => props.changeCounterPosition(props.el.id, +1)}>↓\r\n                </button>\r\n\r\n                {/*INPUT / BUTTONS UPDATE COUNTER VALUE*/}\r\n                {editMode && <><input className='form-control-sm' type='number' onChange={handleUpdateValueChange}/>\r\n                    <button className='btn btn-info btn-sm btn-space'\r\n                            onClick={() => updateOnClick(props.el.id, updateVal)}>Update\r\n                    </button>\r\n                    <button className='btn btn-info btn-sm btn-space' onClick={changeEditMode}>Cancel</button>\r\n                </>}\r\n                {/*EDIT BUTTON*/}\r\n\r\n                {!editMode && <button className='btn btn-info btn-sm btn-space' onClick={changeEditMode}>Edit</button>}\r\n                {!editMode && <button className='btn btn-danger btn-sm btn-space' onClick={()=>props.deleteCounter(props.el.id)}>Delete</button>}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListItem;\r\n","import React from 'react';\r\nimport ListItem from \"./ListItem\";\r\n\r\nfunction List(props) {\r\n\r\n    return (\r\n        <div>\r\n            {props.list.map((el, ind) =>\r\n                <ListItem\r\n                    key={el.id}\r\n                    listlength={props.list.length}\r\n                    el={el} i\r\n                    index={ind}\r\n                    changeCounterPosition={props.changeCounterPosition}\r\n                    handleOperation={props.handleOperation}\r\n                    handleUpdate={props.handleUpdate}\r\n                    deleteCounter={props.deleteCounter}/>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default List;\r\n","import React, {useState} from 'react';\r\n\r\n\r\nfunction Controller(props) {\r\n    const [initVal, setInitVal] = useState(0);\r\n    const [numberButtons, setNumberButtons] = useState(1);\r\nconst [sortDirection, setSortDirection]=useState('asc');\r\n    const handleOnChangeVal = (e) => {\r\n        setInitVal(+e.target.value)\r\n    }\r\n    const handleOnChangeButtons = (e) => {\r\n        setNumberButtons(+e.target.value)\r\n    }\r\n\r\n    const sortOnClick=()=>{\r\n        const newDir=(sortDirection==='asc')?'desc':'asc';\r\n        setSortDirection(newDir);\r\n        props.sortCounters(sortDirection);\r\n    }\r\n    return (\r\n        <div>\r\n            <div className='form-group'>\r\n                {/*<label for=\"initval\">Init Value:</label>*/}\r\n                <input className='form-control-sm' placeholder=\"Initial Value\" id='initval'\r\n                       onChange={handleOnChangeVal}/>\r\n            </div>\r\n            <div className='form-group'>\r\n\r\n                <input className='form-control-sm' id='numberbuttons' placeholder=\"Number Buttons\"\r\n                       onChange={handleOnChangeButtons}/></div>\r\n            <button className='btn btn-info btn-space' onClick={() => props.addCounter(initVal, numberButtons)}>Add New Counter\r\n            </button>\r\n            <button className='btn btn-info btn-space' onClick={sortOnClick}> Sort ↓↑</button>\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controller;\r\n","import React, {useState} from 'react';\nimport {v4 as uuidv4} from 'uuid';\nimport './App.css';\nimport List from \"./List\";\nimport Controller from \"./Controller\";\n\nfunction App() {\n    const [list, setList] = useState([\n        {id: uuidv4(), counter: 5, buttons: 3},\n        {id: uuidv4(), counter: 13, buttons: 4},\n        {id: uuidv4(), counter: 3, buttons: 1}\n    ])\n\n    const addCounter = (val, buttons) => {\n        setList([...list, {id: uuidv4(), counter: val, buttons: buttons}])\n    }\n    const deleteCounter = (id) => {\n        setList(\n            list.filter(el => el.id !== id)\n        )\n    }\n    const sortList = (dir) => {\n        const newList = [...list];\n        if (dir === 'asc')\n            newList.sort((a, b) => a.buttons - b.buttons);\n        else\n            newList.sort((a, b) => b.buttons - a.buttons);\n        setList(newList);\n    }\n    const changeCounterPosition = (id, val) => {\n        const newList = [...list];\n        const ind = (newList.map(el => el.id)).indexOf(id);\n        const current = newList[ind];\n        newList[ind] = newList[ind + val];\n        newList[ind + val] = current;\n        setList(newList);\n    }\n\n    const handleOperation = (id, val) => {\n        const newList = list.map(el => (el.id === id) ? {...el, counter: el.counter + val} : el);\n        setList(newList);\n    }\n\n    const handleUpdate = (id, val) => {\n        const newList = list.map(el => (el.id === id) ? {...el, counter: val} : el);\n        setList(newList);\n    }\n\n    return (\n        <div className='App'>\n            <div>\n                <Controller addCounter={addCounter} sortCounters={sortList}/>\n            </div>\n            <div>\n                <List list={list}\n                      changeCounterPosition={changeCounterPosition}\n                      handleOperation={handleOperation}\n                      handleUpdate={handleUpdate}\n                      deleteCounter={deleteCounter}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'bootstrap/dist/css/bootstrap-grid.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}